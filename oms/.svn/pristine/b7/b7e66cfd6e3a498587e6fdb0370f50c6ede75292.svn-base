package com.iwhalecloud.retail.oms.web.controller.rop;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import com.iwhalecloud.retail.oms.dto.resquest.AdminUserEditRequestDTO;
import io.swagger.annotations.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;

import params.adminuser.req.*;
import params.adminuser.resp.AdminAddResp;
import params.adminuser.resp.AdminEditUserResp;
import params.adminuser.resp.AdminSetStatusResp;
import params.adminuser.resp.AdminUserDelResp;
import params.adminuser.resp.AdminUserRolePageResp;
import params.adminuser.resp.AuthListResp;
import params.adminuser.resp.AuthResp;
import params.adminuser.resp.RoleAddResp;
import params.adminuser.resp.RoleDelResp;
import params.adminuser.resp.RoleListResp;
import params.adminuser.resp.RolePageResp;
import params.adminuser.resp.UserPermissionResp;
import params.adminuser.resp.UserWdLoginResp;
import params.member.req.MemberQryPageReq;
import params.member.resp.MemberQryResp;
import zte.params.member.resp.MemberLoginResp;

import com.alibaba.dubbo.config.annotation.Reference;
import com.iwhalecloud.retail.oms.OmsCommonConsts;
import com.iwhalecloud.retail.oms.common.ResultCodeEnum;
import com.iwhalecloud.retail.oms.dto.ResultVO;
import com.iwhalecloud.retail.oms.dto.resquest.AdminUserAddRequestDTO;
import com.iwhalecloud.retail.oms.dto.resquest.order.RoleAddRequestDTO;
import com.iwhalecloud.retail.oms.service.SystemService;
import com.iwhalecloud.retail.oms.service.TokenService;
import com.iwhalecloud.retail.oms.web.annotation.UserLoginToken;
import com.iwhalecloud.retail.oms.web.controller.BaseController;
import com.ztesoft.form.util.StringUtil;
import com.ztesoft.net.app.base.core.model.Role;
import com.ztesoft.net.eop.resource.model.AdminUser;

@Slf4j
@RestController
@RequestMapping("/api/rop/system")
public class SystemROPController extends BaseController {

    @Reference
    private SystemService systemService;
    @Reference
    private TokenService tokenService;

    /**
     * 管理员登陆（电商的微店登陆）
     * @param req
     * @return
     */
    @ApiOperation(value = "系统员工登陆", notes = "传入UserWdLoginReq对象，进行添加操作")
    @ApiResponses({
            @ApiResponse(code=400,message="请求参数没填好"),
            @ApiResponse(code=404,message="请求路径没有或页面跳转路径不对")
    })
    @RequestMapping(value = "/userWdLogin", method = RequestMethod.POST)
    public ResultVO<UserWdLoginResp> userWdLogin(@RequestBody @ApiParam(value = "UserWdLoginReq", required = true) UserWdLoginReq req) {

        if (StringUtil.isEmpty(req.getUsername())) {
            return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "username不能为空", null);
        }
        if (StringUtil.isEmpty(req.getPassword())) {
            return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "password不能为空", null);
        }
        UserWdLoginResp resp = systemService.userWdLogin(req);

        // 失败统一返回
        if (!resp.getError_code().equals(OmsCommonConsts.RESULE_CODE_SUCCESS)) {
            return ResultVO.error("登陆失败,账号或密码不正确!");
        }

        ResultVO resultVO = new ResultVO();
        resultVO.setResultCode(resp.getError_code());
        resultVO.setResultMsg(resp.getError_msg());
        resultVO.setResultData(resp);
        Map objMap = new HashMap();
        objMap.put("adminUser", resp.getAdminUser());
        objMap.put("userMenu", resp.getUserMenu());
        objMap.put("userSessionId", resp.getUserSessionId());
        try {
            objMap.put("token", tokenService.getUserToken(resp.getAdminUser().getUserid(), resp.getUserSessionId()));
        } catch (Exception e) {
            objMap.put("token", "");
        }

        resultVO.setResultData(objMap);
        return resultVO;
    }

    /**
     * 查询会员列表
     *
     * @param request
     * @param req     查询条件
     * @return
     */
    @RequestMapping(value = "/qryMemberList", method = RequestMethod.POST)
    @UserLoginToken
    public ResultVO memberList(HttpServletRequest request, @RequestBody MemberQryPageReq req) {

        MemberQryResp resp = systemService.qryMemberList(req);

        ResultVO resultVO = new ResultVO();
        resultVO.setResultCode(resp.getError_code());
        resultVO.setResultMsg(resp.getError_msg());
        resultVO.setResultData(resp);

        return resultVO;
    }

    /**
     * 获取用户列表（带角色）
     *
     * @param userName 用户名
     * @return
     */
    @ApiOperation(value = "获取用户列表（带角色）", notes = "可以根据用户账号、姓名、ID 条件进行筛选查询")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "userSessionId", value = "userSessionId", paramType = "path", required = false, dataType = "String"),
            @ApiImplicitParam(name = "userName", value = "userName", paramType = "path", required = false, dataType = "String"),
            @ApiImplicitParam(name = "realName", value = "realName", paramType = "path", required = false, dataType = "String"),
            @ApiImplicitParam(name = "userId", value = "userId", paramType = "path", required = false, dataType = "String"),
            @ApiImplicitParam(name = "pageSize", value = "pageSize", paramType = "path", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageNo", value = "pageNo", paramType = "path", required = true, dataType = "Integer"),
    })
    @ApiResponses({
            @ApiResponse(code=400,message="请求参数没填好"),
            @ApiResponse(code=404,message="请求路径没有或页面跳转路径不对")
    })
    @RequestMapping(value = "/getAdminListWithRole", method = RequestMethod.GET)
    public ResultVO<MemberLoginResp> getAdminListWithRole(
            @RequestParam(value = "userSessionId", required = true) String userSessionId,
            @RequestParam(value = "userName", required = false) String userName,
            @RequestParam(value = "realName", required = false) String realName,
            @RequestParam(value = "userId", required = false) String userId,
            @RequestParam(value = "pageSize", required = true) Integer pageSize,
            @RequestParam(value = "pageNo", required = true) Integer pageNo
    ) {

        AdminUserRolePageReq req = new AdminUserRolePageReq();
        req.setUserSessionId(userSessionId);
        req.setUsername(userName);
        req.setUserid(userId);
        req.setRealname(realName);
        req.setPageNo(pageNo.toString());
        req.setPageSize(pageSize.toString());

        AdminUserRolePageResp resp = systemService.getAdminListWithRole(req);

        // 失败统一返回
        if (!resp.getError_code().equals(OmsCommonConsts.RESULE_CODE_SUCCESS)) {
            return ResultVO.error("获取用户列表失败!");
        }

        ResultVO resultVO = new ResultVO();
        resultVO.setResultCode(ResultCodeEnum.SUCCESS.getCode());
        resultVO.setResultMsg(ResultCodeEnum.SUCCESS.getDesc());
//        resultVO.setResultData(resp);
        resultVO.setResultData(resp.getWebPage());
//        Map objMap = new HashMap();
//        objMap.put("adminList", resp.getWebPage());
//        resultVO.setResultData(objMap);
        return resultVO;
    }

    /**
     * 添加用户(先根据userName字段去查询有没有这个字段值的账号，没有才能注册）
     *
     * @param adminUserAddRequestDTO
     * @return
     */
    @ApiOperation(value = "添加系统员工", notes = "传入AdminUserAddRequestDTO对象，进行添加操作")
    @ApiResponses({
            @ApiResponse(code=400,message="请求参数没填好"),
            @ApiResponse(code=404,message="请求路径没有或页面跳转路径不对")
    })
    @RequestMapping(value = "/addAdminUser", method = RequestMethod.POST)
    public ResultVO<AdminAddResp> addAdminUser(@RequestBody AdminUserAddRequestDTO adminUserAddRequestDTO) {

        if (StringUtil.isEmpty(adminUserAddRequestDTO.getUserName())) {
            return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "账号不能为空", null);
        }
        if (StringUtil.isEmpty(adminUserAddRequestDTO.getPassWord())) {
            return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "密码不能为空", null);
        }
        if (StringUtil.isEmpty(adminUserAddRequestDTO.getUserSessionId())) {
            return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "sessionId不能为空", null);
        }

        // 检查是否存在同名账号
        AdminUser oldAdminUser = systemService.getAdminByUserName(adminUserAddRequestDTO.getUserName());
        if(oldAdminUser != null){
            return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "该账号已经存在，请换一个账号名", null);
        }

        AdminAddReq req = new AdminAddReq();
        AdminUser adminUser = new AdminUser();
        adminUser.setState(1);// 默认可用  0：不可用  1：可用
        adminUser.setUsername(adminUserAddRequestDTO.getUserName());
        adminUser.setRealname(adminUserAddRequestDTO.getRealName());
        adminUser.setPassword(adminUserAddRequestDTO.getPassWord());
        adminUser.setParuserid(adminUserAddRequestDTO.getParentUserId());
        adminUser.setRoleids(adminUserAddRequestDTO.getRoleIds());
        req.setAdminUser(adminUser);
        req.setUserSessionId(adminUserAddRequestDTO.getUserSessionId());
        AdminAddResp resp = systemService.addAdmin(req);

        // 失败统一返回
        if (!resp.getError_code().equals(OmsCommonConsts.RESULE_CODE_SUCCESS)) {
            return ResultVO.error("登陆失败,账号或密码不正确!");
        }

        ResultVO resultVO = new ResultVO();
        resultVO.setResultCode(resp.getError_code());
        resultVO.setResultMsg(resp.getError_msg());
        resultVO.setResultData(resp);
        return resultVO;
    }

    /**
     * 设置用户状态
     * @param req
     * @return
     */
    @ApiOperation(value = "设置用户状态", notes = "传入AdminSetStatusReq对象，进行添加操作")
    @ApiResponses({
            @ApiResponse(code=400,message="请求参数没填好"),
            @ApiResponse(code=404,message="请求路径没有或页面跳转路径不对")
    })
    @RequestMapping(value = "/setAdminStatus", method = RequestMethod.POST)
    public ResultVO<AdminAddResp> setAdminStatus(@RequestBody AdminSetStatusReq req) {

        if (StringUtil.isEmpty(req.getUserId())) {
            return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "用户ID不能为空", null);
        }
        if (req.getStatus() == null) {
            return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "状态不能为空", null);
        }
        if (req.getStatus() != 0 && req.getStatus() != 1) {
            return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "状态值参数错误", null);
        }

        AdminSetStatusResp resp = systemService.setAdminStatus(req);

        // 失败统一返回
        if (!resp.getError_code().equals(OmsCommonConsts.RESULE_CODE_SUCCESS)) {
            return ResultVO.error("修改用户状态失败");
        }

        ResultVO resultVO = new ResultVO();
        resultVO.setResultCode(resp.getError_code());
        resultVO.setResultMsg(resp.getError_msg());
        resultVO.setResultData(resp);
        return resultVO;
    }


    /**
     * 获取所有的角色列表
     *
     * @param userSessionId
     * @param roleName
     * @param roleCode
     * @param authType
     * @param pageSize
     * @param pageNo
     * @return
     */
    @RequestMapping(value = "/getAllRoles", method = RequestMethod.GET)
    public ResultVO<RolePageResp> getAllRoles(
            @RequestParam(value = "userSessionId", required = true) String userSessionId,
            @RequestParam(value = "roleName", required = false) String roleName,
            @RequestParam(value = "roleCode", required = false) String roleCode,
            @RequestParam(value = "authType", required = false) String authType,
            @RequestParam(value = "pageSize", required = true) Integer pageSize,
            @RequestParam(value = "pageNo", required = true) Integer pageNo
    ) {
        RolePageReq rolePageReq = new RolePageReq();
        rolePageReq.setUserSessionId(userSessionId);
        rolePageReq.setRole_name(roleName);
        rolePageReq.setRole_code(roleCode);
        rolePageReq.setAuth_type(authType);
        rolePageReq.setPageNo(pageNo);
        rolePageReq.setPageSize(pageSize);

        RolePageResp resp = systemService.getAllRoles(rolePageReq);

        // 失败统一返回
        if (!resp.getError_code().equals(OmsCommonConsts.RESULE_CODE_SUCCESS)) {
            return ResultVO.error("获取角色列表失败!");
        }

        ResultVO resultVO = new ResultVO();
        resultVO.setResultCode(ResultCodeEnum.SUCCESS.getCode());
        resultVO.setResultMsg(ResultCodeEnum.SUCCESS.getDesc());
        resultVO.setResultData(resp.getWebPage());
        return resultVO;
    }

    /**
     * 获取所有的权限列表
     * @param userSessionId
     * @param authName  权限名称
     * @param authId  权限ID
     * @param authType 权限类型
     * @param pageSize
     * @param pageNo
     * @return
     */
    @RequestMapping(value = "/getAllAuths", method = RequestMethod.GET)
    public ResultVO<MemberLoginResp> getAllAuths(
            @RequestParam(value = "userSessionId", required = true) String userSessionId,
            @RequestParam(value = "authName", required = false) String authName,
            @RequestParam(value = "authId", required = false) String authId,
            @RequestParam(value = "authType", required = false) String authType,
            @RequestParam(value = "pageSize", required = true) Integer pageSize,
            @RequestParam(value = "pageNo", required = true) Integer pageNo
    ) {
        AuthPageReq req = new AuthPageReq();
        req.setUserSessionId(userSessionId);
        req.setName(authName);
        req.setAct_id(authId);
        req.setType(authType);
        req.setPage(pageNo);
        req.setPageSize(pageSize);

        AuthListResp resp = systemService.getAllAuths(req);

        // 失败统一返回
//        if(resp.getWebPage() == null){
//            return ResultVO.error("获取角色列表失败!");
//        }
        // 失败统一返回
        if (!resp.getError_code().equals(OmsCommonConsts.RESULE_CODE_SUCCESS)) {
            return ResultVO.error("获取权限列表失败!");
        }

        ResultVO resultVO = new ResultVO();
        resultVO.setResultCode(ResultCodeEnum.SUCCESS.getCode());
        resultVO.setResultMsg(ResultCodeEnum.SUCCESS.getDesc());
        resultVO.setResultData(resp.getWebPage());
        return resultVO;
    }

    /**
     * 编辑用户(可以编辑 用户名、姓名、角色）
     * @para requestDTO
     * @return
     */
    @RequestMapping(value = "/AdminUser", method = RequestMethod.POST)
    public ResultVO<AdminAddResp> editAdminUser(@RequestBody AdminUserEditRequestDTO requestDTO) {

        if (StringUtil.isEmpty(requestDTO.getUserId())) {
            return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "用户ID不能为空", null);
        }
        if (requestDTO.getRoleIds() == null) {
            return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "角色ID数组不能为空", null);
        }
        if (StringUtil.isEmpty(requestDTO.getUserSessionId())) {
            return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "sessionId不能为空", null);
        }

        // 先获取 原数据
        AdminUser adminUser = systemService.getAdminById(requestDTO.getUserId());
        if (adminUser == null) {
            adminUser = new AdminUser();
        }

        AdminUserEditReq req = new AdminUserEditReq();
        // 设置要修改的值
        adminUser.setUserid(requestDTO.getUserId());
        if (!StringUtil.isEmpty(requestDTO.getUserName())) {
            adminUser.setUsername(requestDTO.getUserName());
        }
        // 关联角色
        adminUser.setRoleids(requestDTO.getRoleIds());
        req.setAdminUser(adminUser);
        req.setUserSessionId(requestDTO.getUserSessionId());
        AdminEditUserResp resp = systemService.editAdmin(req);

        // 失败统一返回
        if (!resp.getError_code().equals(OmsCommonConsts.RESULE_CODE_SUCCESS)) {
            return ResultVO.error("编辑用户失败!");
        }

        ResultVO resultVO = new ResultVO();
        resultVO.setResultCode(resp.getError_code());
        resultVO.setResultMsg(resp.getError_msg());
//        Map objMap = new HashMap();
//        objMap.put("adminUserId", resp.getBody());
//        resultVO.setResultData(objMap);
//        resultVO.setResultData(resp.getBody());
        return resultVO;
    }

    /**
     * 编辑用户角色（单单编辑角色）
     * @param requestDTO
     * @return
     */
    @RequestMapping(value = "/editAdminUserRoles", method = RequestMethod.POST)
    public ResultVO<AdminAddResp> editAdminUserRoles(@RequestBody AdminUserEditRequestDTO requestDTO) {

        if (StringUtil.isEmpty(requestDTO.getUserId())) {
            return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "用户ID不能为空", null);
        }
        if (requestDTO.getRoleIds() == null) {
            return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "角色参数缺失", null);
        }

        UserPermissionReq req = new UserPermissionReq();
        req.setRoleids(requestDTO.getRoleIds());
        req.setUserid(requestDTO.getUserId());
        UserPermissionResp resp = systemService.editAdminRoles(req);

        // 失败统一返回
        if (!resp.getError_code().equals(OmsCommonConsts.RESULE_CODE_SUCCESS)) {
            return ResultVO.error("编辑用户角色失败!");
        }

        ResultVO resultVO = new ResultVO();
        resultVO.setResultCode(resp.getError_code());
        resultVO.setResultMsg(resp.getError_msg());
        return resultVO;
    }

    /**
     * 获取用户角色
     *
     * @param userId
     * @return
     */
    @RequestMapping(value = "/getAdminUserRoles", method = RequestMethod.GET)
    public ResultVO<AdminAddResp> getAdminUserRoles(
            @RequestParam(value = "userId", required = true) String userId
    ) {

        if (StringUtil.isEmpty(userId)) {
            return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "用户ID不能为空", null);
        }

        RoleReq req = new RoleReq();
        req.setRoleid(userId);
        RoleListResp resp = systemService.getAdminRoles(req);

        // 失败统一返回
        if (!resp.getError_code().equals(OmsCommonConsts.RESULE_CODE_SUCCESS)) {
            return ResultVO.error("获取用户角色列表失败!");
        }

        ResultVO resultVO = new ResultVO();
        resultVO.setResultCode(resp.getError_code());
        resultVO.setResultMsg(resp.getError_msg());
//        Map objMap = new HashMap();
//        objMap.put("adminUserId", resp.get());
//        resultVO.setResultData(objMap);
        resultVO.setResultData(resp);
        return resultVO;
    }

    /**
     * 获取角色权限
     *
     * @param roleId
     * @return
     */
    @RequestMapping(value = "/getAuthsByRoleId", method = RequestMethod.GET)
    public ResultVO<AdminAddResp> getAuthsByRoleId(
            @RequestParam(value = "roleId", required = true) String roleId
    ) {

        if (StringUtil.isEmpty(roleId)) {
            return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "角色ID不能为空", null);
        }

        AuthReq req = new AuthReq();
        req.setRoleid(roleId);
        AuthResp resp = systemService.getAuthsByRoleId(req);

        // 失败统一返回
        if (!resp.getError_code().equals(OmsCommonConsts.RESULE_CODE_SUCCESS)) {
            return ResultVO.error("获取角色权限列表失败!");
        }

        ResultVO resultVO = new ResultVO();
        resultVO.setResultCode(resp.getError_code());
        resultVO.setResultMsg(resp.getError_msg());
//        Map objMap = new HashMap();
//        objMap.put("adminUserId", resp.get());
//        resultVO.setResultData(objMap);
        resultVO.setResultData(resp);
        return resultVO;
    }


    /**
     * 添加角色
     *
     * @param roleAddRequestDTO
     * @return
     */
    @RequestMapping(value = "/addRole", method = RequestMethod.POST)
    public ResultVO<AdminAddResp> addRole(@RequestBody RoleAddRequestDTO roleAddRequestDTO) {

        if (StringUtil.isEmpty(roleAddRequestDTO.getRoleName())) {
            return failResultVO("参数缺失，角色名称不能为空");
        }
        if (roleAddRequestDTO.getActIds() == null) {
            return failResultVO("参数缺失，权限id数组不能为空");
        }

        RoleAddReq req = new RoleAddReq();
        Role role = new Role();
        role.setRolename(roleAddRequestDTO.getRoleName());
        role.setRolememo(roleAddRequestDTO.getRoleDesc());
        role.setCreateuserid(roleAddRequestDTO.getUserId());
        req.setRole(role);
        req.setActs(roleAddRequestDTO.getActIds());
//        req.setUserSessionId(adminUserAddRequestDTO.getUserSessionId());
        RoleAddResp resp = systemService.addRole(req);

        // 失败统一返回
        if (!resp.getError_code().equals(OmsCommonConsts.RESULE_CODE_SUCCESS)) {
            return failResultVO("添加角色失败!");
        }

        ResultVO resultVO = new ResultVO();
        resultVO.setResultCode(resp.getError_code());
        resultVO.setResultMsg(resp.getError_msg());
        resultVO.setResultData(resp);
        return resultVO;
    }


    /**
     * 编辑角色
     *
     * @param roleAddRequestDTO
     * @return
     */
    @RequestMapping(value = "/editRole", method = RequestMethod.POST)
    public ResultVO<RoleAddResp> editRole(@RequestBody RoleAddRequestDTO roleAddRequestDTO) {

        if (StringUtil.isEmpty(roleAddRequestDTO.getRoleName())) {
            return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "角色名称不能为空", null);
        }
        if (roleAddRequestDTO.getRole() == null) {
            return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "角色不能为空", null);
        }
        if (StringUtil.isEmpty(roleAddRequestDTO.getRole().getRoleid())) {
            return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "角色id不能为空", null);
        }
        if (roleAddRequestDTO.getActIds() == null) {
            return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "权限ID数组actIds参数缺失", null);
        }

        RoleEditReq req = new RoleEditReq();
        Role role = roleAddRequestDTO.getRole();
        role.setRolename(roleAddRequestDTO.getRoleName());
        if (roleAddRequestDTO.getRoleDesc() != null) {
            role.setRolememo(roleAddRequestDTO.getRoleDesc());
        }
        req.setRole(role);
        if (roleAddRequestDTO.getActIds() != null) {
            req.setActs(roleAddRequestDTO.getActIds());
        }
        RoleAddResp resp = systemService.editRole(req);

        // 失败统一返回
        if (!resp.getError_code().equals(OmsCommonConsts.RESULE_CODE_SUCCESS)) {
            return ResultVO.error("编辑角色失败!");
        }

        ResultVO resultVO = new ResultVO();
        resultVO.setResultCode(resp.getError_code());
        resultVO.setResultMsg(resp.getError_msg());
        resultVO.setResultData(resp);
        return resultVO;
    }


    /**
     * 删除角色
     *
     * @param roleAddRequestDTO
     * @return
     */
    @RequestMapping(value = "/deleteRole", method = RequestMethod.POST)
    public ResultVO<RoleDelResp> deleteRole(@RequestBody RoleAddRequestDTO roleAddRequestDTO) {

        if (StringUtil.isEmpty(roleAddRequestDTO.getRoleId())) {
            return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "角色id不能为空", null);
        }

        RoleDelReq req = new RoleDelReq();
        req.setRoleid(roleAddRequestDTO.getRoleId());
        RoleDelResp resp = systemService.deleteRole(req);

        // 失败统一返回
        if (!resp.getError_code().equals(OmsCommonConsts.RESULE_CODE_SUCCESS)) {
            return ResultVO.error("删除角色失败!");
        }

        ResultVO resultVO = new ResultVO();
        resultVO.setResultCode(resp.getError_code());
        resultVO.setResultMsg(resp.getError_msg());
        resultVO.setResultData(resp);
        return resultVO;
    }

    /**
     * 删除用户
     *
     * @param requestDTO
     * @return
     */
    @RequestMapping(value = "/deleteAdmin", method = RequestMethod.POST)
    public ResultVO<AdminUserDelResp> deleteAdmin(@RequestBody AdminUserEditRequestDTO requestDTO) {

        if (StringUtil.isEmpty(requestDTO.getUserId())) {
            return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "用户id不能为空", null);
        }

        AdminUserDelReq req = new AdminUserDelReq();
        req.setUser_id(requestDTO.getUserId());
        AdminUserDelResp resp = systemService.deleteAdmin(req);

        // 失败统一返回
        if (!resp.getError_code().equals(OmsCommonConsts.RESULE_CODE_SUCCESS)) {
            return ResultVO.error("删除用户失败!");
        }

        ResultVO resultVO = new ResultVO();
        resultVO.setResultCode(resp.getError_code());
        resultVO.setResultMsg(resp.getError_msg());
        resultVO.setResultData(resp);
        return resultVO;
    }

}
