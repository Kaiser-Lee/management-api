package com.iwhalecloud.retail.oms.web.controller.rop;

import com.alibaba.dubbo.config.annotation.Reference;
import com.auth0.jwt.JWT;
import com.auth0.jwt.interfaces.Claim;
import com.google.common.collect.Lists;
import com.iwhalecloud.retail.oms.common.ResultCodeEnum;
import com.iwhalecloud.retail.oms.consts.OmsConst;
import com.iwhalecloud.retail.oms.dto.ResultVO;
import com.iwhalecloud.retail.oms.service.GoodsService;
import com.iwhalecloud.retail.oms.web.utils.ResponseComUtil;
import com.iwhalecloud.retail.partner.entity.GoodsRel;
import com.iwhalecloud.retail.partner.service.GoodsRelService;
import com.ztesoft.form.util.StringUtil;
import lombok.extern.slf4j.Slf4j;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;
import zte.params.comments.req.CommentsPageListReq;
import zte.params.comments.resp.CommentsPageListResp;
import zte.params.goods.req.*;
import zte.params.goods.resp.*;
import zte.params.goodstype.req.GoodsTypeListReq;
import zte.params.goodstype.resp.GoodsTypeListResp;

import javax.servlet.http.HttpServletRequest;
import java.util.List;
import java.util.Map;

/**
 * @author mzl
 * @date 2018/10/8
 */
@RestController
@RequestMapping("/api/rop/goods")
@Slf4j
public class GoodsROPController {

	@Reference
    private GoodsService goodsService;

    @Reference
    private GoodsRelService goodsRelService;

    @GetMapping(value="listGoods")
    public ResultVO listGoods(@RequestParam(value = "pageNo", required = false) Integer pageNo, @RequestParam
        (value = "pageSize", required = false) Integer pageSize, @RequestParam(value = "catId", required = false)
        String catId, @RequestParam(value = "searchKey", required = false) String searchKey, @RequestParam(value = "marketEnable",
        required = false) String marketEnable) {
        log.info("GoodsController.listGoods pageNo={}, pageSize={}, catId={}, searchKey={}, marketEnable={}", pageNo, pageSize, catId, searchKey, marketEnable);
        GoodsPageListReq req = new GoodsPageListReq();
        if (!StringUtils.isEmpty(pageNo) && !StringUtils.isEmpty(pageSize)) {
            req.setPageNo(pageNo);
            req.setPageSize(pageSize);
        }
        req.setCat_id(catId);
        req.setSearch_key(searchKey);
        if (StringUtils.isEmpty(marketEnable)) {
            marketEnable = OmsConst.MARKET_ENABLE;
        }
        req.setMarket_enable(marketEnable);
        req.setAudit_state(OmsConst.AUDIT_STATE);
        GoodsPageListResp resp = goodsService.queryGoodsForPage(req);
        if (StringUtils.isEmpty(resp)) {
            return ResultVO.error();
        }
        if (ResultCodeEnum.SUCCESS.getCode().equals(resp.getError_code())) {
            return ResultVO.success(ResponseComUtil.page(pageNo,resp.getGoodsPage()));
        } else {
            return ResultVO.error(resp.getError_code(),resp.getError_msg());
        }
    }

    @GetMapping(value="queryGoodsDetail")
    public ResultVO queryGoodsDetail(@RequestParam(value = "goodsId") String goodsId) {
        log.info("GoodsController.queryGoodsDetail goodsId={}", goodsId);
        GoodsIntroReq req = new GoodsIntroReq();
        req.setGoods_id(goodsId);
        GoodsIntroResp resp = goodsService.queryGoodsDetail(req);
        if (StringUtils.isEmpty(resp)) {
            return ResultVO.error();
        }
        if (ResultCodeEnum.SUCCESS.getCode().equals(resp.getError_code())) {
            return ResultVO.success(resp.getGoods());
        } else {
            return ResultVO.error(resp.getError_code(),resp.getError_msg());
        }
    }

    @GetMapping(value="listGoodsComments")
    public ResultVO listGoodsComments(@RequestParam(value = "pageNo", required = false) Integer pageNo, @RequestParam
            (value = "pageSize", required = false) Integer pageSize, @RequestParam(value = "goodsId") String goodsId,
            @RequestParam(value = "commentType") String commentType) {
        log.info("GoodsController.listGoodsComments pageNo={}, pageSize={}, goodsId={}, commentType={}", pageNo, pageSize, goodsId, commentType);
        CommentsPageListReq req = new CommentsPageListReq();
        if (!StringUtils.isEmpty(pageNo) && !StringUtils.isEmpty(pageSize)) {
            req.setPageNo(pageNo);
            req.setPageSize(pageSize);
        }
        req.setGoods_id(goodsId);
        req.setComment_type(commentType);
        CommentsPageListResp resp = goodsService.listGoodsComments(req);
        if (StringUtils.isEmpty(resp)) {
            return ResultVO.error();
        }
        if (ResultCodeEnum.SUCCESS.getCode().equals(resp.getError_code())) {
            return ResultVO.success(ResponseComUtil.page(pageNo,resp.getPage()));
        } else {
            return ResultVO.error(resp.getError_code(),resp.getError_msg());
        }
    }

    @GetMapping(value="listGoodsSpec")
    public ResultVO listGoodsSpec(@RequestParam(value = "goodsId") String goodsId) {
        log.info("GoodsController.listGoodsSpec goodsId={}", goodsId);
        GoodsSpecListReq req = new GoodsSpecListReq();
        req.setGoods_id(goodsId);
        GoodsSpecListResp resp = goodsService.listGoodsSpec(req);
        if (StringUtils.isEmpty(resp)) {
            return ResultVO.error();
        }
        if (ResultCodeEnum.SUCCESS.getCode().equals(resp.getError_code())) {
            return ResultVO.success(resp.getSpecs());
        } else {
            return ResultVO.error(resp.getError_code(),resp.getError_msg());
        }
    }

    @GetMapping(value="goodsTypeList")
    public ResultVO goodsTypeList() {
        GoodsTypeListReq req = new GoodsTypeListReq();
        GoodsTypeListResp resp = goodsService.getTypeList(req);
        if (StringUtils.isEmpty(resp)) {
            return ResultVO.error();
        }
        if (ResultCodeEnum.SUCCESS.getCode().equals(resp.getError_code())) {
            return ResultVO.success(resp.getTypeList());
        } else {
            return ResultVO.error(resp.getError_code(),resp.getError_msg());
        }
    }

    @PostMapping(value="addGoods")
    public ResultVO addGoods(@RequestBody GoodsAddReq req, HttpServletRequest request) {
        log.info("GoodsController.addGoods req={}", req);
        ResultVO resultVO = getUserId(request);
        if (!resultVO.isSuccess()) {
            return resultVO;
        }
        String id = (String)resultVO.getResultData();
        req.setUser_id(id);
        if (StringUtils.isEmpty(req.getSpecValues()) || req.getSpecValues().length == 0) {
            return ResultVO.errorEnum(ResultCodeEnum.SPEC_VALUES_CAN_NOT_BE_NULL);
        }
        GoodsAddResp resp = goodsService.addGoods(req);
        if (StringUtils.isEmpty(resp)) {
            return ResultVO.error();
        }
        if (ResultCodeEnum.SUCCESS.getCode().equals(resp.getError_code())) {
            List<GoodsReq> goodsReqList = req.getRecommendList();
            if (!CollectionUtils.isEmpty(goodsReqList)) {
                List<GoodsRel> goodsRelList = Lists.newArrayList();
                for (GoodsReq goodsReq : goodsReqList) {
                    GoodsRel goodsRel = new GoodsRel();
                    goodsRel.setAGoodsId(goodsReq.getGoods_id());
                    goodsRel.setZGoodsId(resp.getGoods_id());
                    goodsRelList.add(goodsRel);
                }
                goodsRelService.addGoodsRel(goodsRelList);
            }
            return ResultVO.success(resp.getGoods_id());
        } else {
            return ResultVO.error(resp.getError_code(),resp.getError_msg());
        }
    }

    private ResultVO getUserId(HttpServletRequest request) {
        // 从 http 请求头中取出 token
        String token = request.getHeader("token");
        // 如果http请求头没有token则尝试从session中获取
        if (StringUtil.isEmpty(token)) {
            token = (String)request.getSession().getAttribute("TOKEN");
        }
        if (StringUtil.isEmpty(token)) {
            return ResultVO.errorEnum(ResultCodeEnum.NOT_LOGIN);
        }
        // 执行认证
        if (token == null || token.equals("")) {
            return ResultVO.errorEnum(ResultCodeEnum.NOT_LOGIN);
        }
        String id;
        try {
            Map<String, Claim> claims = JWT.decode(token).getClaims();
            id = claims.get("id").asString();
        } catch (Exception ex) {
            log.error("GoodsROPController.getUserId Exception ex={}",ex);
            return ResultVO.errorEnum(ResultCodeEnum.NOT_LOGIN);
        }
        if (StringUtils.isEmpty(id)) {
            return ResultVO.errorEnum(ResultCodeEnum.NOT_LOGIN);
        }
        return ResultVO.success(id);
    }

    @PostMapping(value="editGoods")
    public ResultVO editGoods(@RequestBody GoodsEditReq req) {
        log.info("GoodsController.editGoods req={}", req);
        GoodsEditResp resp = goodsService.editGoods(req);
        if (StringUtils.isEmpty(resp)) {
            return ResultVO.error();
        }
        if (ResultCodeEnum.SUCCESS.getCode().equals(resp.getError_code())) {
            List<GoodsReq> goodsReqList = req.getRecommendList();
            String goodsId = req.getGoods_id();
            if (!CollectionUtils.isEmpty(goodsReqList)) {
                List<GoodsRel> goodsRelList = Lists.newArrayList();
                for (GoodsReq goodsReq : goodsReqList) {
                    GoodsRel goodsRel = new GoodsRel();
                    goodsRel.setAGoodsId(goodsReq.getGoods_id());
                    goodsRel.setZGoodsId(goodsId);
                    goodsRelList.add(goodsRel);
                }
                goodsRelService.editRecommendGoodsByGoodsId(goodsRelList);
            } else {
                goodsRelService.delRecommendGoodsByGoodsId(goodsId);
            }
            return ResultVO.success();
        } else {
            return ResultVO.error(resp.getError_code(),resp.getError_msg());
        }
    }

    @PostMapping(value="deleteGoods")
    public ResultVO deleteGoods(@RequestBody GoodsDeleteReq req) {
        log.info("GoodsController.deleteGoods req={}", req);
        GoodsDeleteResp resp = goodsService.deleteGoods(req);
        if (StringUtils.isEmpty(resp)) {
            return ResultVO.error();
        }
        if (ResultCodeEnum.SUCCESS.getCode().equals(resp.getError_code())) {
            return ResultVO.success();
        } else {
            return ResultVO.error(resp.getError_code(),resp.getError_msg());
        }
    }

    @GetMapping(value="queryGoodsByIdsAndName")
    public ResultVO queryGoodsByIdsAndName(@RequestParam(value = "pageNo", required = false) Integer pageNo, @RequestParam
            (value = "pageSize", required = false) Integer pageSize, @RequestParam(value = "name", required = false) String name,
            @RequestParam(value = "ids", required = false) String ids) {
        log.info("GoodsController.queryGoodsByIdsAndName pageNo={},pageSize={},name={},ids={}", pageNo, pageSize, name, ids);
        GoodsPageByIdsReq req = new GoodsPageByIdsReq();
        if (!StringUtils.isEmpty(pageNo) && !StringUtils.isEmpty(pageSize)) {
            req.setPageNo(pageNo);
            req.setPageSize(pageSize);
        }
        req.setName(name);
        req.setIds(ids);
        GoodsPageListResp resp = goodsService.queryGoodsByIdsAndName(req);
        if (StringUtils.isEmpty(resp)) {
            return ResultVO.error();
        }
        if (ResultCodeEnum.SUCCESS.getCode().equals(resp.getError_code())) {
            return ResultVO.success(ResponseComUtil.page(req.getPageNo(),resp.getGoodsPage()));
        } else if (ResultCodeEnum.ROP_INVOKE_EXCEPTION.getCode().equals(resp.getError_code())) {
            return ResultVO.error(resp.getError_code(), resp.getError_msg());
        }
        else {
            return ResultVO.successMessage("查询数据为空");
        }
    }

    @PostMapping(value="updateMarketEnable")
    public ResultVO updateMarketEnable(@RequestBody UpdateMarketEnableReq req) {
        log.info("GoodsController.updateMarketEnable req={}", req);
        UpdateMarketEnableResp resp = goodsService.updateMarketEnable(req);
        if (StringUtils.isEmpty(resp)) {
            return ResultVO.error();
        }
        if (ResultCodeEnum.SUCCESS.getCode().equals(resp.getError_code())) {
            return ResultVO.success();
        } else {
            return ResultVO.error(resp.getError_code(), resp.getError_msg());
        }
    }

    @GetMapping("/getGoodsByRecommendGoodsId")
    public ResultVO getGoodsInfoByRecommendGoodsId(@RequestParam(value = "goodsId") String goodsId) {
        com.iwhalecloud.retail.partner.dto.ResultVO resultVO = goodsRelService.getRecommendGoodsByGoodsId(goodsId);
        if (resultVO.isSuccess()) {
            List<String> recommendGoodsIds = (List<String>)resultVO.getResultData();
            if (CollectionUtils.isEmpty(recommendGoodsIds)) {
                return ResultVO.error("查询数据为空");
            }
            GoodsPageByIdsReq req = new GoodsPageByIdsReq();
            String ids = "";
            for (String id : recommendGoodsIds) {
                ids += id +",";
            }
            ids = ids.substring(0,ids.length()-1);
            req.setIds(ids);
            GoodsPageListResp resp = goodsService.queryGoodsByIdsAndName(req);
            if (ResultCodeEnum.SUCCESS.getCode().equals(resp.getError_code())) {
                return ResultVO.success(ResponseComUtil.page(req.getPageNo(),resp.getGoodsPage()));
            } else if (ResultCodeEnum.ROP_INVOKE_EXCEPTION.getCode().equals(resp.getError_code())) {
                return ResultVO.error(resp.getError_code(), resp.getError_msg());
            }
            else {
                return ResultVO.error("查询数据为空");
            }
        }
        return ResultVO.error("查询数据为空");
    }
}
