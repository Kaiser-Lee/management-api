package com.iwhalecloud.retail.oms.manager;

import com.iwhalecloud.retail.oms.dto.ContentPicsetDTO;
import com.iwhalecloud.retail.oms.dto.ContentVideosDefaultContentDTO;
import com.iwhalecloud.retail.oms.entity.ContentVideosDefaultContent;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Component;
import javax.annotation.Resource;
import com.iwhalecloud.retail.oms.mapper.ContentVideosDefaultContentMapper;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


@Component
public class ContentVideosDefaultContentManager{
    @Resource
    private ContentVideosDefaultContentMapper contentVideosDefaultContentMapper;

    public ContentVideosDefaultContentDTO insertContentVideosDefaultContent(ContentVideosDefaultContentDTO contentVideosDefaultContentDTO){
        ContentVideosDefaultContent contentVideosDefaultContent = new ContentVideosDefaultContent();
        BeanUtils.copyProperties(contentVideosDefaultContentDTO,contentVideosDefaultContent);
        contentVideosDefaultContentMapper.insert(contentVideosDefaultContent);
        BeanUtils.copyProperties(contentVideosDefaultContent,contentVideosDefaultContentDTO);
        return contentVideosDefaultContentDTO;
    }

    public ContentVideosDefaultContentDTO updateContentVideosDefaultContent(ContentVideosDefaultContentDTO contentVideosDefaultContentDTO){
        ContentVideosDefaultContent contentVideosDefaultContent = new ContentVideosDefaultContent();
        BeanUtils.copyProperties(contentVideosDefaultContentDTO,contentVideosDefaultContent);
        contentVideosDefaultContentMapper.updateById(contentVideosDefaultContent);
        BeanUtils.copyProperties(contentVideosDefaultContent,contentVideosDefaultContentDTO);
        return contentVideosDefaultContentDTO;
    }

    public List<ContentVideosDefaultContentDTO> queryContentVideoDefalutList(List<Long> contentIds){

        List<ContentVideosDefaultContent> contentVideosDefaultContentList = contentVideosDefaultContentMapper.queryContentVideoDefalutList(contentIds);
        List<ContentVideosDefaultContentDTO> contentVideosDefaultContentDTOList = new ArrayList<>();
        int index = 0;
        for(ContentVideosDefaultContent contentVideosDefaultContent: contentVideosDefaultContentList){
            ContentVideosDefaultContentDTO contentVideosDefaultContentDTO = new ContentVideosDefaultContentDTO();
            BeanUtils.copyProperties(contentVideosDefaultContent,contentVideosDefaultContentDTO);
            contentVideosDefaultContentDTOList.add(index++, contentVideosDefaultContentDTO);
        }
        return contentVideosDefaultContentDTOList;
    }

    public int deleteContentVideosDefaultContent(ContentVideosDefaultContentDTO contentVideosDefaultContentDTO){
        Map<String,Object> contentVideosDefaultContentMap = new HashMap<String,Object>();
        contentVideosDefaultContentMap.put("CONTENTID",contentVideosDefaultContentDTO.getContentid());
        return contentVideosDefaultContentMapper.deleteByMap(contentVideosDefaultContentMap);
    }

}
