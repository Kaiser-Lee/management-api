package com.iwhalecloud.retail.oms.web.controller.cms;


import com.iwhalecloud.retail.oms.consts.OmsConst;
import com.iwhalecloud.retail.oms.dto.ContentTagDTO;
import com.iwhalecloud.retail.oms.dto.response.contentbase.ContentBasePersonalDTO;
import com.iwhalecloud.retail.oms.dto.response.contentbase.ContentBaseResponseDTO;
import com.iwhalecloud.retail.oms.dto.resquest.contentbase.ContentBaseRequestDTO;
import com.iwhalecloud.retail.oms.entity.*;
import com.iwhalecloud.retail.oms.service.*;
import com.iwhalecloud.retail.oms.dto.ResultVO;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import lombok.extern.slf4j.Slf4j;

import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.alibaba.dubbo.config.annotation.Reference;
import com.alibaba.fastjson.JSON;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.iwhalecloud.retail.oms.OmsCommonConsts;
import com.iwhalecloud.retail.oms.dto.ContentBaseDTO;
import com.iwhalecloud.retail.oms.dto.resquest.ContentBasePageReq;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Ji.kai
 * @date 2018/10/28 15:27
 */
@Slf4j
@RestController
@CrossOrigin
@RequestMapping("/api/contentBase")
public class ContentBaseController {
	
	@Reference
    private ContentBaseService contentBaseService;
    @Reference
    private ContentOrderpicService contentOrderpicService;
    @Reference
    private ContentPicService contentPicService;
    @Reference
    private ContentPicsetService contentPicsetService;
    @Reference
    private CatalogService catalogService;
    @Reference
    private ContentTagService contentTagService;
    @Reference
    private TagService tagService;
    @Reference
    private ContentMaterialService contentMaterialService;
    @Reference
    private ContentVideosDefaultContentService contentVideosDefaultContentService;
    @Reference
    private ContentVediolv2Service contentVediolv2Service;
    @Reference
    private ContentTextService contentTextService;

    /**
     * 内容列表分页查询接口.
     *
     * @param page
     * @return
     * @author Ji.kai
     * @date 2018/10/29 15:27
     */
    @ApiOperation(value = "内容列表分页查询接口", notes = "根据在页面上选择的目录、内容类型、内容状态、标签以及输入的关键字等查询内容")
    @ApiResponses({
            @ApiResponse(code=400,message="请求参数没填好"),
            @ApiResponse(code=404,message="请求路径没有或页面跳转路径不对")
    })
    @RequestMapping(value = "/qryPagelist", method = RequestMethod.POST)
    public ResultVO<Page<ContentBaseDTO>> qryContentBasePageList(@RequestBody @ApiParam( value = "查询条件", required = true )ContentBasePageReq page) {
        ResultVO<Page<ContentBaseDTO>> resultVO = new ResultVO<>();
        log.info("page:{}", JSON.toJSONString(page));
        try {
            Page<ContentBaseDTO> res = contentBaseService.qryContentBasePageList(page);
            resultVO.setResultCode(OmsCommonConsts.RESULE_CODE_SUCCESS);
            resultVO.setResultData(res);
            resultVO.setResultMsg("成功");
        } catch (Exception e) {
            e.printStackTrace();
            resultVO.setResultCode(OmsCommonConsts.RESULE_CODE_FAIL);
            resultVO.setResultMsg(e.getMessage());
        }
        return resultVO;
    }


    @ApiOperation(value = "查看当前内容的详情", notes = "根据内容类型查询内容基础信息")
    @ApiResponses({
            @ApiResponse(code=400,message="请求参数没填好"),
            @ApiResponse(code=404,message="请求路径没有或页面跳转路径不对")
    })
    @RequestMapping(value = "/queryContentDeatil", method = RequestMethod.POST)
    public ResultVO<ContentBaseResponseDTO> queryContentDeatil(@RequestBody ContentBaseRequestDTO contentBaseRequestDTO) {
        ResultVO<ContentBaseResponseDTO> resultVO = new ResultVO<ContentBaseResponseDTO>();
        log.info("contentBaseRequestDTO:{}", JSON.toJSONString(contentBaseRequestDTO));
        ContentBaseResponseDTO contentBaseResponseDTO = new ContentBaseResponseDTO();
        try {
            ContentBasePersonalDTO contentBasePersonalDTO = new ContentBasePersonalDTO();
            ContentBaseDTO contentBaseDTO = new ContentBaseDTO();
            contentBaseDTO.setContentId(contentBaseRequestDTO.getContentId());
            //调用各个原子服务
            ContentBaseDTO contentBase = contentBaseService.queryContentBase(contentBaseDTO);
            if(contentBase!=null){
                contentBaseResponseDTO.setContentBase(contentBase);
            }
            Long cataId = contentBase.getCatalogId();
            //类型	0：软文 1：单图 2：轮播图 3：推广图集 4：纯视频 5：关联视频
            Integer type = contentBase.getType();
            List<Catalog> catalogs = catalogService.queryCatalog(cataId);
            if(catalogs!=null){
                contentBasePersonalDTO.setCataLogs(catalogs);
            }
            Long contentId = contentBaseRequestDTO.getContentId();
            ContentTagDTO contentTagDTO = new ContentTagDTO();
            contentTagDTO.setContentId(contentId);
            List<ContentTag> contentTags  = contentTagService.queryContentTag(contentTagDTO);
            List<Long> tagIds = new ArrayList<Long>();
            if(contentTags!=null){
                contentBasePersonalDTO.setContentTags(contentTags);
                for (int i = 0; i < contentTags.size() ; i++) {
                    tagIds.add(contentTags.get(i).getTagId());
                }
            }
            if(tagIds.size()>0){
                List<TTag> tTags  = tagService.queryTagListByParam(tagIds);
                if (tTags!=null){
                    contentBasePersonalDTO.setTags(tTags);
                }
            }
            List<Long> matids = new ArrayList<>();
            List<ContentMaterial> contentMaterials = contentMaterialService.queryContentMaterialList(contentId);
            if(contentMaterials!=null){
                contentBasePersonalDTO.setContentMaterials(contentMaterials);
                for (int i = 0; i < contentMaterials.size() ; i++) {
                    matids.add(Long.valueOf(String.valueOf(contentMaterials.get(i).getMatid())));
                }
            }
            if(OmsConst.ContentTypeEnum.CONTENT_TEXT.getCode().equals(String.valueOf(type).trim())){
                List<ContentText> contentTexts = contentTextService.queryContentText(contentId);
                if(contentTexts!=null){
                    contentBasePersonalDTO.setContentTexts(contentTexts);
                }
            }
            if(OmsConst.ContentTypeEnum.CONTENT_PIC.getCode().equals(String.valueOf(type).trim())){
                List<ContentPic> contentPics = contentPicService.queryContentPicList(contentId);
                if(contentPics!=null){
                    contentBasePersonalDTO.setContentPics(contentPics);
                }
            }
            if(OmsConst.ContentTypeEnum.CONTENT_ORDERPIC.getCode().equals(String.valueOf(type).trim())){
                List<ContentOrderpic> contentOrderpics =contentOrderpicService.queryContentOrderPicList(contentId);
                if(contentOrderpics!=null){
                    contentBasePersonalDTO.setContentOrderpics(contentOrderpics);
                }
            }
            if(OmsConst.ContentTypeEnum.CONTENT_PICSET.getCode().equals(String.valueOf(type).trim())){
                List<ContentPicset>  contentPicsets = contentPicsetService.queryContentPicsetList(contentId);
                if(contentPicsets!=null){
                    contentBasePersonalDTO.setContentPicsets(contentPicsets);
                }
            }
            if(OmsConst.ContentTypeEnum.CONTENT_VIDEO.getCode().equals(String.valueOf(type).trim())){
                List<Long> contentIds = new ArrayList<>();
                contentIds.add(contentId);
                List<ContentVideosDefaultContent> contentVideosDefaultContents = contentVideosDefaultContentService.queryContentVideoDefalutList(contentIds);
                if(contentVideosDefaultContents!=null){
                    contentBasePersonalDTO.setContentVedios(contentVideosDefaultContents);
                }
            }
            if(OmsConst.ContentTypeEnum.CONTENT_VIDEO_REL.getCode().equals(String.valueOf(type).trim())){
                if(matids!=null){
                    List<ContentVediolv2>  contentVediolv2s = contentVediolv2Service.queryContentVediolTwoList(matids);
                    if(contentVediolv2s!=null){
                        contentBasePersonalDTO.setContentVediolv2s(contentVediolv2s);
                    }
                }
            }
            contentBaseResponseDTO.setContentBasePersonal(contentBasePersonalDTO);
            resultVO.setResultCode(OmsCommonConsts.RESULE_CODE_SUCCESS);
            resultVO.setResultData(contentBaseResponseDTO);
            resultVO.setResultMsg("成功");
        } catch (Exception e) {
            e.printStackTrace();
            resultVO.setResultCode(OmsCommonConsts.RESULE_CODE_FAIL);
            resultVO.setResultMsg(e.getMessage());
        }
        return resultVO;
    }

}