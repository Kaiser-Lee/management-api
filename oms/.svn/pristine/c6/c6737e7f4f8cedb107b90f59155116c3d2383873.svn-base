package com.iwhalecloud.retail.oms.web.controller.rop;

import com.alibaba.dubbo.config.annotation.Reference;
import com.auth0.jwt.JWT;
import com.auth0.jwt.JWTVerifier;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.exceptions.JWTVerificationException;
import com.auth0.jwt.interfaces.Claim;
import com.google.common.collect.Maps;
import com.iwhalecloud.retail.oms.OmsCommonConsts;
import com.iwhalecloud.retail.oms.common.ResultCodeEnum;
import com.iwhalecloud.retail.oms.consts.OmsConst;
import com.iwhalecloud.retail.oms.dto.ResultVO;
import com.iwhalecloud.retail.oms.dto.resquest.MemberLoginRequestDTO;
import com.iwhalecloud.retail.oms.dto.resquest.MemberRegisterRequestDTO;
import com.iwhalecloud.retail.oms.dto.resquest.RandomLogAddReq;
import com.iwhalecloud.retail.oms.dto.resquest.RandomLogQueryReq;
import com.iwhalecloud.retail.oms.entity.MemberBinding;
import com.iwhalecloud.retail.oms.service.MemberService;
import com.iwhalecloud.retail.oms.service.TokenService;
import com.iwhalecloud.retail.oms.web.annotation.PassToken;
import com.iwhalecloud.retail.oms.web.controller.BaseController;
import com.ztesoft.form.util.StringUtil;
import com.ztesoft.net.app.base.core.model.Member;

import lombok.extern.slf4j.Slf4j;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.*;

import utils.MD5Util;
import zte.params.member.req.MemberIsExistsReq;
import zte.params.member.req.MemberLoginReq;
import zte.params.member.resp.MemberIsExistsResp;
import zte.params.member.resp.MemberLoginResp;
import zte.params.member.resp.MemberRegisterResp;

import javax.servlet.http.HttpServletRequest;

import java.util.Map;
import java.util.UUID;

/**
 * @author
 * @date 2018/10/8
 */
@RestController
@RequestMapping("/api/rop/member")
@Slf4j
public class MemberROPController extends BaseController {

    @Value("${jwt.secret}")
    private String SECRET;

    @Reference
	private MemberService memberService;
    @Reference
	private TokenService tokenService;

	/**
	 * 会员登陆
	 * @param requestDTO
	 * @return
	 */
	@RequestMapping(value="/login",method = RequestMethod.POST)
	@PassToken
	public ResultVO memberLogin(@RequestBody MemberLoginRequestDTO requestDTO) {

		if (StringUtil.isEmpty(requestDTO.getMobile())) {
			return ResultVO.error(OmsCommonConsts.RESULE_CODE_FAIL, "用户名或手机号不能为空");
		}
		if (StringUtil.isEmpty(requestDTO.getPwd())) {
			return ResultVO.error(OmsCommonConsts.RESULE_CODE_FAIL, "密码或验证码不能为空");
		}
		if (StringUtil.isEmpty(requestDTO.getLoginType())) {
			return ResultVO.error(OmsCommonConsts.RESULE_CODE_FAIL, "登陆类型不能为空");
		}

		MemberLoginResp resp;
		MemberLoginReq req = new MemberLoginReq();
		req.setMobile(requestDTO.getMobile());
		if(OmsConst.LoginTypeEnum.PASSWORD.getCode().equals(requestDTO.getLoginType())){
			// 密码登陆
			req.setPwd(requestDTO.getPwd());
			resp = memberService.login(req);
		} else if (OmsConst.LoginTypeEnum.VERIFICATION_CODE.getCode().equals(requestDTO.getLoginType())){
			// TODO 校验验证码
			RandomLogQueryReq randomLogQueryReq = new RandomLogQueryReq();
			randomLogQueryReq.setReceviNo(requestDTO.getMobile());
			randomLogQueryReq.setRandomCode(requestDTO.getPwd());
			ResultVO resultVO = memberService.selectLogIdByRandomCode(randomLogQueryReq);
			if (resultVO.isSuccess()) {
				memberService.updateValidStatus((String)resultVO.getResultData());
				req.setUserName(requestDTO.getMobile());
				resp = memberService.login(req);
			} else {
				return ResultVO.error(OmsCommonConsts.RESULE_CODE_FAIL, "校验验证码失败");
			}
		} else {
			return ResultVO.error(OmsCommonConsts.RESULE_CODE_FAIL, "登陆类型错误");
		}
		if(!resp.getError_code().equals(OmsCommonConsts.RESULE_CODE_SUCCESS)){
			return ResultVO.error("登陆失败！");
		}
		Map objMap = Maps.newConcurrentMap();
		objMap.put("member", resp.getMember());
		try {
			objMap.put("token", tokenService.getMemberToken(resp.getMember().getMember_id(), resp.getUserSessionId()));
		}catch (Exception e){
			return ResultVO.error("获取token异常");
		}
		return ResultVO.success(objMap);
	}

	/**
	 * 获取会员信息（外层都返回成功，是否登陆在resultData字段里面返回）
	 * 不用token拦截啦，这里本身要做token校验啦（方便统一返回）
	 * @param request
	 * @return
	 */
	@RequestMapping(value="/getMember",method = RequestMethod.GET)
	@PassToken
	public ResultVO getMember(HttpServletRequest request) {
        ResultVO checkUserLoginResult = checkUserLogin(request);
		Map objMap = Maps.newConcurrentMap();
		if (!checkUserLoginResult.isSuccess()) {
			// 验证码失败返回
//			return checkUserLoginResult;
			objMap.put("member", ""); // 注意不能用null代替""，不然会报空指针的
			objMap.put("loginStatusCode", OmsConst.loginStatusEnum.NOT_LOGIN.getCode());
			objMap.put("loginStatusMsg", OmsConst.loginStatusEnum.NOT_LOGIN.getValue());
			return ResultVO.success(objMap);
        }
        Member member = (Member)request.getSession().getAttribute(OmsConst.SESSION_MEMBER);
        if (member == null) {
			String memberId = (String) checkUserLoginResult.getResultData();
			member = memberService.getMember(memberId);
			
			request.getSession().setAttribute(OmsConst.SESSION_MEMBER,member);
		}
		objMap.put("member", member);
		objMap.put("loginStatusCode", OmsConst.loginStatusEnum.HAVE_LOGIN.getCode());
		objMap.put("loginStatusMsg", OmsConst.loginStatusEnum.HAVE_LOGIN.getValue());
		return ResultVO.success(objMap);
	}

    /**
     * 判断用户是否登陆
     * @param request
     * @return
     */
    private ResultVO checkUserLogin(HttpServletRequest request) {
        // 从 http 请求头中取出 token
        String token = request.getHeader("token");
        // 如果http请求头没有token则尝试从session中获取
        if (StringUtil.isEmpty(token)) {
            token = (String)request.getSession().getAttribute("TOKEN");
        }
        if (StringUtil.isEmpty(token)) {
            return ResultVO.errorEnum(ResultCodeEnum.NOT_LOGIN);
        }
        // 执行认证
        if (token == null || token.equals("")) {
            return ResultVO.errorEnum(ResultCodeEnum.NOT_LOGIN);
        }
        String id;
        try {
            Map<String, Claim> claims = JWT.decode(token).getClaims();
            id = claims.get("id").asString();
            if (id == null) {
                return ResultVO.errorEnum(ResultCodeEnum.NOT_LOGIN);
            }
			String sessionId = claims.get("sessionId").asString();
            int exp = claims.get("exp").asInt();
            int iat = claims.get("iat").asInt();
            String selfToken = claims.get("selfToken").asString();
            if(!selfToken.equals(MD5Util.compute("id="+id+"&sessionId="+sessionId+"&secret="+SECRET+"&exp="+String.valueOf(exp)+"&iat="+String.valueOf(iat)))){
                return ResultVO.errorEnum(ResultCodeEnum.NOT_LOGIN);
            }
        } catch (Exception ex) {
            log.error("MemberController.getMemberToken Exception ex={}",ex);
            return ResultVO.errorEnum(ResultCodeEnum.NOT_LOGIN);
        }
        // 验证 token
        JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC256(SECRET)).build();
        try {
            jwtVerifier.verify(token);
        } catch (JWTVerificationException e) {
            return ResultVO.errorEnum(ResultCodeEnum.NOT_LOGIN);
        }
        return ResultVO.success(id);
    }

    /**
	 * 注册会员
	 * @param requestDTO
	 * @return
	 */
	@RequestMapping(value="/register",method = RequestMethod.POST)
	public ResultVO memberRegister(@RequestBody MemberRegisterRequestDTO requestDTO) {

		if (StringUtil.isEmpty(requestDTO.getMobile()) || StringUtil.isEmpty(requestDTO.getVerificationCode())) {
			return ResultVO.errorEnum(ResultCodeEnum.LACK_OF_PARAM);
		}
		//TODO 校验验证码
		RandomLogQueryReq randomLogQueryReq = new RandomLogQueryReq();
		randomLogQueryReq.setReceviNo(requestDTO.getMobile());
		randomLogQueryReq.setRandomCode(requestDTO.getVerificationCode());
		ResultVO result = memberService.selectLogIdByRandomCode(randomLogQueryReq);
		if (!result.isSuccess()) {
			return ResultVO.error(OmsCommonConsts.RESULE_CODE_FAIL, "校验验证码失败");
		}
		memberService.updateValidStatus((String)result.getResultData());
		// 会员对象
		Member member = new Member();
		member.setMobile(requestDTO.getMobile());
		if (StringUtil.isEmpty(requestDTO.getName())) {
			//TODO 生成随机的名字 平台简称(翼码购）+时间戳
			member.setName("YMG_"+ System.currentTimeMillis());
		}
		// 先设置为mobile 随机生成password
		member.setUname(requestDTO.getMobile());
		// 后面会员列表查询根据手机号码的查询的是查这个字段
		member.setTel(requestDTO.getMobile());
		member.setPassword(UUID.randomUUID().toString().replace("-", ""));
        MemberRegisterResp resp = memberService.register(member);

		if(!resp.getError_code().equals(OmsCommonConsts.RESULE_CODE_SUCCESS)){
			return ResultVO.error(resp.getError_code(), resp.getError_msg());
		}
		MemberLoginRequestDTO memberLoginRequestDTO = new MemberLoginRequestDTO();
		memberLoginRequestDTO.setLoginType(OmsConst.LoginTypeEnum.VERIFICATION_CODE.getCode());
		memberLoginRequestDTO.setMobile(requestDTO.getMobile());
		memberLoginRequestDTO.setPwd(requestDTO.getVerificationCode());
		ResultVO loginResult = memberLogin(memberLoginRequestDTO);
		return loginResult;
	}

	/**
	 * 通过手机号查询会员是否存在
	 * @param requestDTO (传 mobile 字段）
	 * @return  里面有个exists字段，为true存在， false 不存在
	 */
	@RequestMapping(value="/isExists",method = RequestMethod.POST)
	public ResultVO memberIsExists(@RequestBody MemberLoginRequestDTO requestDTO) {

		if (StringUtil.isEmpty(requestDTO.getMobile())) {
			return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "手机号mobile不能为空", null);
		}

		MemberIsExistsReq req = new MemberIsExistsReq();
		req.setPhone_no(requestDTO.getMobile());
		//跟注册一致（用手机号作为账户名uname）
		req.setUname(req.getPhone_no());
		MemberIsExistsResp resp = memberService.isExists(req);

		ResultVO resultVO = new ResultVO();
		resultVO.setResultCode(resp.getError_code());
		resultVO.setResultMsg(resp.getError_msg());
		resultVO.setResultData(resp);

		return resultVO;
	}


	/**
	 * 查询会员是否绑定第三方平台
	 * @param memberBinding (传targetId字段）
	 * @return  里面有个exists字段，为true存在， false 不存在
	 */
	@RequestMapping(value="/isBinding",method = RequestMethod.POST)
	public ResultVO memberIsBinding(@RequestBody MemberBinding memberBinding) {

		if (StringUtil.isEmpty(memberBinding.getTargetId())) {
			return resultVO(OmsCommonConsts.RESULE_CODE_FAIL, "平台ID不能为空", null);
		}
		memberBinding = memberService.getMemberBinding(memberBinding.getTargetId());

		if(memberBinding == null){
			return ResultVO.error("该平台暂无绑定账号！");
		} else {
			return ResultVO.success(memberBinding);
		}
	}

	/**
	 * 获取验证码
	 * @param req 获取验证码参数
	 * @return
	 */
	@PostMapping(value="/getVerificationCode")
	public ResultVO getVerificationCode(HttpServletRequest request, @RequestBody RandomLogAddReq req){
		String sessionId = request.getSession().getId();
		log.info("MemberController.getVerificationCode sessionId={}, req={}", sessionId, req);
		return memberService.insertRandomLog(sessionId, req);
	}

}
