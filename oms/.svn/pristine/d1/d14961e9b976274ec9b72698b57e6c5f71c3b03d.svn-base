package com.iwhalecloud.retail.oms.web.controller.rop;

import java.util.HashMap;
import java.util.List;

import io.swagger.annotations.*;
import lombok.extern.slf4j.Slf4j;

import org.springframework.web.bind.annotation.*;

import com.alibaba.dubbo.config.annotation.Reference;
import com.iwhalecloud.retail.oms.OmsCommonConsts;
import com.iwhalecloud.retail.oms.dto.ResultVO;
import com.iwhalecloud.retail.oms.dto.SelectTagListDTO;
import com.iwhalecloud.retail.oms.dto.TagDTO;
import com.iwhalecloud.retail.oms.service.TagService;
import com.ztesoft.form.util.StringUtil;

/**
 * @Auther: lin.wh
 * @Date: 2018/10/23 15:19
 * @Description:
 */

@Slf4j
@RestController
@CrossOrigin
@RequestMapping("/api/rop/tag")
public class TagROPController {
    @Reference
    private TagService tagService;

    @ApiOperation(value = "新增TagDTO", notes = "传入TagDTO对象，进行保存操作")
    @ApiResponses({
            @ApiResponse(code = 400, message = "请求参数没填好"),
            @ApiResponse(code = 404, message = "请求路径没有或页面跳转路径不对")
    })
    @RequestMapping(value = "/createTag", method = RequestMethod.POST)
    public ResultVO createCloudDevice(@RequestBody @ApiParam(value = "TagDTO", required = true) TagDTO request) {
        ResultVO resultVO = new ResultVO();
        try {
            tagService.createTag(request);
            resultVO.setResultCode(OmsCommonConsts.RESULE_CODE_SUCCESS);
            resultVO.setResultData("新增成功");
            resultVO.setResultMsg("success");
        } catch (Exception e) {
            e.printStackTrace();
            resultVO.setResultCode(OmsCommonConsts.RESULE_CODE_FAIL);
            resultVO.setResultData(e.getMessage());
        }
        return resultVO;
    }

    @ApiOperation(value = "删除TagDTO", notes = "根据标签id，进行删除操作")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "tagId", value = "标签ID", paramType = "path", required = true, dataType = "Int")
    })
    @ApiResponses({
            @ApiResponse(code = 400, message = "请求参数没填好"),
            @ApiResponse(code = 404, message = "请求路径没有或页面跳转路径不对")
    })
    @RequestMapping(value = "/deleteTag/{tagId}", method = RequestMethod.DELETE)
    public ResultVO deleteCloudDevice(@PathVariable long tagId) {
        ResultVO resultVO = new ResultVO();
        try {
            TagDTO request = new TagDTO();
            request.setTagId(tagId);
            tagService.deleteTag(request);
            resultVO.setResultCode(OmsCommonConsts.RESULE_CODE_SUCCESS);
            resultVO.setResultData("删除成功");
            resultVO.setResultMsg("success");
        } catch (Exception e) {
            e.printStackTrace();
            resultVO.setResultCode(OmsCommonConsts.RESULE_CODE_FAIL);
            resultVO.setResultData(e.getMessage());
        }
        return resultVO;
    }

    @ApiOperation(value = "修改TagDTO", notes = "接口支持根据tagId修改标签id")
    @ApiResponses({
            @ApiResponse(code = 400, message = "请求参数没填好"),
            @ApiResponse(code = 404, message = "请求路径没有或页面跳转路径不对")
    })
    @RequestMapping(value = "/editTag", method = RequestMethod.PUT)
    public ResultVO updateCloudDeviceStatus(@RequestBody TagDTO dto) {
        ResultVO resultVO = new ResultVO();
        try {
            tagService.editTag(dto);
            resultVO.setResultCode(OmsCommonConsts.RESULE_CODE_SUCCESS);
            resultVO.setResultData("修改成功");
            resultVO.setResultMsg("success");
        } catch (Exception e) {
            e.printStackTrace();
            resultVO.setResultCode(OmsCommonConsts.RESULE_CODE_FAIL);
            resultVO.setResultData(e.getMessage());
        }
        return resultVO;
    }

    @ApiOperation(value = "查询TagDTO", notes = "根据tagName，查询SelectTagListDTO对象")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "tagName", value = "tagName", paramType = "path", required = true, dataType = "String")
    })
    @ApiResponses({
            @ApiResponse(code = 400, message = "请求参数没填好"),
            @ApiResponse(code = 404, message = "请求路径没有或页面跳转路径不对")
    })
    @RequestMapping(value = "/get/{tagName}", method = RequestMethod.GET)
    public ResultVO<List<SelectTagListDTO>> queryTagList(@PathVariable String tagName) {
        ResultVO resultVO = new ResultVO();
        HashMap<String, Object> map = new HashMap<String, Object>();
        if (!StringUtil.isEmpty(tagName)) {
            map.put("tagName", "%" + tagName + "%");
        } else {
            map.put("tagName", tagName);
        }

        try {
            List<SelectTagListDTO> tagDTO = tagService.queryTagList(map);
            resultVO.setResultCode(OmsCommonConsts.RESULE_CODE_SUCCESS);
            resultVO.setResultData(tagDTO);
            resultVO.setResultMsg("success");
        } catch (Exception e) {
            e.printStackTrace();
            resultVO.setResultCode(OmsCommonConsts.RESULE_CODE_FAIL);
            resultVO.setResultData(e.getMessage());
        }
        return resultVO;
    }
}

